Traceback (most recent call last):
  File "/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
plt.figure(figsize=(10,5))
sns.lineplot(wcss)
plt.title('Elbow')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[7], line 2[0m
[1;32m      1[0m plt[38;5;241m.[39mfigure(figsize[38;5;241m=[39m([38;5;241m10[39m,[38;5;241m5[39m))
[0;32m----> 2[0m [43msns[49m[38;5;241;43m.[39;49m[43mlineplot[49m[43m([49m[43mwcss[49m[43m)[49m
[1;32m      3[0m plt[38;5;241m.[39mtitle([38;5;124m'[39m[38;5;124mElbow[39m[38;5;124m'[39m)
[1;32m      4[0m plt[38;5;241m.[39mxlabel([38;5;124m'[39m[38;5;124mNumber of clusters[39m[38;5;124m'[39m)

File [0;32m/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/seaborn/relational.py:645[0m, in [0;36mlineplot[0;34m(data, x, y, hue, size, style, units, palette, hue_order, hue_norm, sizes, size_order, size_norm, dashes, markers, style_order, estimator, errorbar, n_boot, seed, orient, sort, err_style, err_kws, legend, ci, ax, **kwargs)[0m
[1;32m    642[0m color [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mcolor[39m[38;5;124m"[39m, kwargs[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mc[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    643[0m kwargs[[38;5;124m"[39m[38;5;124mcolor[39m[38;5;124m"[39m] [38;5;241m=[39m _default_color(ax[38;5;241m.[39mplot, hue, color, kwargs)
[0;32m--> 645[0m [43mp[49m[38;5;241;43m.[39;49m[43mplot[49m[43m([49m[43max[49m[43m,[49m[43m [49m[43mkwargs[49m[43m)[49m
[1;32m    646[0m [38;5;28;01mreturn[39;00m ax

File [0;32m/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/seaborn/relational.py:489[0m, in [0;36m_LinePlotter.plot[0;34m(self, ax, kws)[0m
[1;32m    486[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39merr_style [38;5;241m==[39m [38;5;124m"[39m[38;5;124mband[39m[38;5;124m"[39m:
[1;32m    488[0m     func [38;5;241m=[39m {[38;5;124m"[39m[38;5;124mx[39m[38;5;124m"[39m: ax[38;5;241m.[39mfill_between, [38;5;124m"[39m[38;5;124my[39m[38;5;124m"[39m: ax[38;5;241m.[39mfill_betweenx}[orient]
[0;32m--> 489[0m     [43mfunc[49m[43m([49m
[1;32m    490[0m [43m        [49m[43msub_data[49m[43m[[49m[43morient[49m[43m][49m[43m,[49m
[1;32m    491[0m [43m        [49m[43msub_data[49m[43m[[49m[38;5;124;43mf[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{[39;49;00m[43mother[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43mmin[39;49m[38;5;124;43m"[39;49m[43m][49m[43m,[49m[43m [49m[43msub_data[49m[43m[[49m[38;5;124;43mf[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{[39;49;00m[43mother[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43mmax[39;49m[38;5;124;43m"[39;49m[43m][49m[43m,[49m
[1;32m    492[0m [43m        [49m[43mcolor[49m[38;5;241;43m=[39;49m[43mline_color[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43merr_kws[49m
[1;32m    493[0m [43m    [49m[43m)[49m
[1;32m    495[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39merr_style [38;5;241m==[39m [38;5;124m"[39m[38;5;124mbars[39m[38;5;124m"[39m:
[1;32m    497[0m     error_param [38;5;241m=[39m {
[1;32m    498[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mother[38;5;132;01m}[39;00m[38;5;124merr[39m[38;5;124m"[39m: (
[1;32m    499[0m             sub_data[other] [38;5;241m-[39m sub_data[[38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mother[38;5;132;01m}[39;00m[38;5;124mmin[39m[38;5;124m"[39m],
[1;32m    500[0m             sub_data[[38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mother[38;5;132;01m}[39;00m[38;5;124mmax[39m[38;5;124m"[39m] [38;5;241m-[39m sub_data[other],
[1;32m    501[0m         )
[1;32m    502[0m     }

File [0;32m/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/matplotlib/__init__.py:1423[0m, in [0;36m_preprocess_data.<locals>.inner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1420[0m [38;5;129m@functools[39m[38;5;241m.[39mwraps(func)
[1;32m   1421[0m [38;5;28;01mdef[39;00m [38;5;21minner[39m(ax, [38;5;241m*[39margs, data[38;5;241m=[39m[38;5;28;01mNone[39;00m, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m   1422[0m     [38;5;28;01mif[39;00m data [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 1423[0m         [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43max[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;28;43mmap[39;49m[43m([49m[43msanitize_sequence[49m[43m,[49m[43m [49m[43margs[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m   1425[0m     bound [38;5;241m=[39m new_sig[38;5;241m.[39mbind(ax, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m   1426[0m     auto_label [38;5;241m=[39m (bound[38;5;241m.[39marguments[38;5;241m.[39mget(label_namer)
[1;32m   1427[0m                   [38;5;129;01mor[39;00m bound[38;5;241m.[39mkwargs[38;5;241m.[39mget(label_namer))

File [0;32m/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/matplotlib/axes/_axes.py:5367[0m, in [0;36mAxes.fill_between[0;34m(self, x, y1, y2, where, interpolate, step, **kwargs)[0m
[1;32m   5365[0m [38;5;28;01mdef[39;00m [38;5;21mfill_between[39m([38;5;28mself[39m, x, y1, y2[38;5;241m=[39m[38;5;241m0[39m, where[38;5;241m=[39m[38;5;28;01mNone[39;00m, interpolate[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[1;32m   5366[0m                  step[38;5;241m=[39m[38;5;28;01mNone[39;00m, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m-> 5367[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_fill_between_x_or_y[49m[43m([49m
[1;32m   5368[0m [43m        [49m[38;5;124;43m"[39;49m[38;5;124;43mx[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mx[49m[43m,[49m[43m [49m[43my1[49m[43m,[49m[43m [49m[43my2[49m[43m,[49m
[1;32m   5369[0m [43m        [49m[43mwhere[49m[38;5;241;43m=[39;49m[43mwhere[49m[43m,[49m[43m [49m[43minterpolate[49m[38;5;241;43m=[39;49m[43minterpolate[49m[43m,[49m[43m [49m[43mstep[49m[38;5;241;43m=[39;49m[43mstep[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/matplotlib/axes/_axes.py:5272[0m, in [0;36mAxes._fill_between_x_or_y[0;34m(self, ind_dir, ind, dep1, dep2, where, interpolate, step, **kwargs)[0m
[1;32m   5268[0m         kwargs[[38;5;124m"[39m[38;5;124mfacecolor[39m[38;5;124m"[39m] [38;5;241m=[39m \
[1;32m   5269[0m             [38;5;28mself[39m[38;5;241m.[39m_get_patches_for_fill[38;5;241m.[39mget_next_color()
[1;32m   5271[0m [38;5;66;03m# Handle united data, such as dates[39;00m
[0;32m-> 5272[0m ind, dep1, dep2 [38;5;241m=[39m [38;5;28mmap[39m(
[1;32m   5273[0m     ma[38;5;241m.[39mmasked_invalid, [38;5;28mself[39m[38;5;241m.[39m_process_unit_info(
[1;32m   5274[0m         [(ind_dir, ind), (dep_dir, dep1), (dep_dir, dep2)], kwargs))
[1;32m   5276[0m [38;5;28;01mfor[39;00m name, array [38;5;129;01min[39;00m [
[1;32m   5277[0m         (ind_dir, ind), ([38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mdep_dir[38;5;132;01m}[39;00m[38;5;124m1[39m[38;5;124m"[39m, dep1), ([38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mdep_dir[38;5;132;01m}[39;00m[38;5;124m2[39m[38;5;124m"[39m, dep2)]:
[1;32m   5278[0m     [38;5;28;01mif[39;00m array[38;5;241m.[39mndim [38;5;241m>[39m [38;5;241m1[39m:

File [0;32m/usr/share/miniconda/envs/open-machine-learning-jupyter-book/lib/python3.9/site-packages/numpy/ma/core.py:2360[0m, in [0;36mmasked_invalid[0;34m(a, copy)[0m
[1;32m   2332[0m [38;5;28;01mdef[39;00m [38;5;21mmasked_invalid[39m(a, copy[38;5;241m=[39m[38;5;28;01mTrue[39;00m):
[1;32m   2333[0m     [38;5;124;03m"""[39;00m
[1;32m   2334[0m [38;5;124;03m    Mask an array where invalid values occur (NaNs or infs).[39;00m
[1;32m   2335[0m 
[0;32m   (...)[0m
[1;32m   2357[0m 
[1;32m   2358[0m [38;5;124;03m    """[39;00m
[0;32m-> 2360[0m     [38;5;28;01mreturn[39;00m masked_where([38;5;241m~[39m([43mnp[49m[38;5;241;43m.[39;49m[43misfinite[49m[43m([49m[43mgetdata[49m[43m([49m[43ma[49m[43m)[49m[43m)[49m), a, copy[38;5;241m=[39mcopy)

[0;31mTypeError[0m: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''
TypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''

